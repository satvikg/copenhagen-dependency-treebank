== DTAG HOWTO ==

This document describes how to use DTAG for different tasks. 

=== Starting and closing DTAG ===

Start DTAG by clicking on the "DTAG" icon on your desktop. If you are 
connected to the Internet, you should update DTAG first by clicking on the "Update DTAG" icon. 

*Note.* At CBS, you have to enter your username and password before you get a
network connection: open a browser by clicking on the Firefox icon at the top
menu bar, open an arbitrary internet page, and enter your CBS username and
password when prompted. You can choose wireless LAN by clicking on the Network 
icon at the top menu bar on the right.

  * *{{{viewer}}}*: show the current graph in a window (if the viewer doesn't display correctly, simply restart the viewer by closing the viewer window and typing {{{viewer}}} again.
  * *{{{manual}}}*: open a web browser with a local copy of the CDT treebank.dk website; click on the "Dependency maps" link in order to get access to more than 10.000 searchable treebank examples. 
  * *{{{note <node> <text>}}}*: make a note at the given node with the given text (used if you want to comment on a certain part of the graph, eg, for later post-editing).
  * *{{{notes}}}*: print all notes associated with nodes in the visible text.
  * *{{{edges <node>}}}*: show all alignment edges or incoming edges at the given node. The command can be abbreviated *{{{<node>}}}*, and in an alignment graph, the node key is assumed to be "a" unless otherwise stated. Eg, in an alignment graph, the following three commands are equivalent: {{{edges a12}}}, {{{a12}}}, {{{12}}}. 
  * *command line:* you can use up- and down-arrows to see previous commands, left- and right-arrows to edit previous commands; hit return to re-execute the command. 

=== Tasks and revision control ===

  * *{{{opentask}}}*: open the first unfinished task that has been assigned to you (the _current task_).
  * *{{{closetask}}}*: mark the current task as closed, eg, tell DTAG that you are completely done with it so that {{{opentask}}} will return another task.
  * *{{{save}}}*: save your current work on your hard disk (you should do this frequently). 
  * *{{{update}}}*: update your local copy of the central CDT repository with all the annotations.
  * *{{{commit}}}*: upload your local annotations to the central CDT repository.
  * *{{{exit}}}*: close DTAG (without saving!)
  * *{{{tasks}}}*: open your task list in an editor; you can then reorder the tasks (if you want to do them in a different order), add tasks, or reopen tasks that you have closed inadvertently.

=== Annotating alignment graphs ===

  * *{{{<nodes> [<label>] <nodes>}}}*: create alignment -- eg, {{{1+3 label 2..7}}} or {{{a1..3 a1..3}}} if you want to align the nodes 1..3 on the a-side with themselves. You do not have to provide a label.
  * *{{{del <node>}}}*: delete all alignment edges at the given node, eg, {{{del a3}}}. 
  * *{{{ok}}}*: accept all the red edges proposed by the autoaligner.
  * *{{{autoalign -off}}}*: turn off the autoaligner (started automatically by {{{opentask}}}).

Advanced commands:

  * *{{{offset [=+-][ab][offset]}}}*: specify offset for alignment graph, either absolutely ("=") or relatively ("+" and "-", with "+" as the default). This changes the numbering of the nodes, and hides negatively numbered nodes. Eg: {{{offset a30 b20}}}, {{{offset a-30}}}, {{{offset =a0 =b0}}}. 
  * *{{{autoalign <files>}}}:* start autoaligner using the listed files as training material, eg, {{{autoalign *.atag}}}. 

=== Annotating dependency graphs ===

  * *{{{<node> <label> <node>}}}*: create a dependency edge stating that the first node is a {{{label}}} dependent of the second node (eg, {{{23 subj 45}}}). The dependency is drawn as an arrow that starts at the governor (head word) and ends at the dependent (subordinate word).
  * *{{{edel <node>}}}*: delete all in-coming edges at the given node.
  * *{{{edgel <node> <label> <node>}}}*: delete the given dependency edge.
  * *{{{show <node>}}}*: display the graph starting from the given node. Uses relative node numbering (+-=), as in offset. Eg: {{{show 30}}}, {{{show -30}}}, {{{show =0}}} (show entire graph).
  * *{{{oshow <offset>}}}*: display the graph from the given node, renumbering it as node 0. Eg: {{{oshow 30}}}, {{{oshow -30}}}, {{{oshow =0}}} (show entire graph). 
  * *{{{text}}}*: print the entire graph as plain text with node numbering.

=== Annotating word segments ===

  * *{{{segment <node> <segments>}}}*: segment the given node into smaller parts; opens a segment editor for the given node if {{{<segments>}}} is omitted. Eg, {{{segment 123}}} or {{{segment 123 auto|camper}}} (dependency graphs), {{{segment b17}}} or {{{segment b17 ¹hard²disk}}} (alignments). The segments are numbered with the superscript digits "¹²³" (press "shift+!altgr+1" or "{{{^+1}}}", similarly for 2 and 3) preceded by "{{{^}}}" (press "^+^") if there are more than 3 segments. These digits are used to identify the segments. If you insert a segment boundary, the vertical bar "|", the numbering is performed automatically by DTAG.
  * *alignment edges for segments:* specify the relevant segments in the edge label, eg when aligning "¹wind²shield" with "wind shield", simply specify alignment edges {{{0 ¹= 0}}} and {{{0 ²= 1}}}. 
  * *dependency edges for segments:* specify the relevant segments in the edge label, eg when annotating internal dependency structure of "¹wind²shield", create alignment edges {{{0 ¹mod² 0}}}. 

=== Comparing annotations with diff ===

  * *{{{diff <file>}}}*: compare the current dependency graph with the given dependency graph. Prints statistics and shows differences graphically. Eg: {{{diff 0502-it-morten.tag}}} (when working on {{{0502-it-iørn.tag}}}).
  * *{{{adiff <file>}}}*: compare the current alignment with the given alignment. Prints statistics and shows differences graphically. Eg: {{{adiff 0502-da-it-morten.atag}}} (when working on {{{0502-da-it-iørn.atag}}}).
  * *{{{undiff}}}*: turn off diff mode again.

=== Searching dependency graphs ===

  * *{{{find [-corpus] <constraint>}}}*: search the graph (or the entire corpus co nsisting of all dependency graphs) for all occurrences that match the given constraint. The constraint consists of simple constraints on labels, edges, and word order that can be combined with logical AND "&", OR "|", and NOT "!", as well as universal and existential quantifier expressions ({{{exist(<var>, <constraint>)}}} and {{{all(<var>, <constraint>)}}}. Examples:
    * {{{find $X subj $Y}}} <br>_(all occurences of a subject $X and its head word $Y)_
    * {{{find $X =~ /^at$/}}}  <br>_(all occurences of a word $X that matches the regular expression {{{/^at$/}}} ("{{{^}}}" = start of string, "$" = end of string)_
    * {{{find $X[msd] =~ /^NP/}}}  <br>_(all occurrences of a word $X whose word class ("msd") starts with "NP" (a proper noun))_
    * {{{find ( $X expl $Y ) & ( $X[lemma] =~ /^der$/ ) & ( $X > $Y )}}}  <br>_(all occurences of the expletive word $X with lemma "der" which has been analyzed as an "expl" dependent of a preceding word $Y)_
  * *{{{next}}}*: goto the next match in the search
  * *{{{prev}}}*: goto the previous match in the search

=== Other useful commands ===

  * *{{{!ls <pattern>}}}*: list all files in current directory that match the pattern {{{<pattern>}}}; the wild-card character is "{{{*}}}". Eg: {{{ls 0001*.tag}}}. 
  * *{{{pwd}}}*: print current working directory.
  * *{{{cd <directory>}}}*: change to the given directory. Eg: {{{cd da-it}}}; {{{cd /home/cdt/cdt}}}. 